snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${1:name} <- function(${2:variables}) {
		${0}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

snippet shinyapp
	library(shiny)
	
	ui <- fluidPage(
	  ${0}
	)
	
	server <- function(input, output, session) {
	  
	}
	
	shinyApp(ui, server)

snippet shinymod
	${1:name}_UI <- function(id) {
	  ns <- NS(id)
	  tagList(
		${0}
	  )
	}
	
	${1:name} <- function(input, output, session) {
	  
	}


# My personal snippets
snippet start
	# Author: Julien Diot juliendiot@ut-biomet.org
	# `r format(Sys.time(), "%Y")` The University of Tokyo
	#
	# Description:
	# ${1:Description}
	
	#### PACKAGES ####
	library(plotly)
	
	#### OPTIONS ####
	options(stringsAsFactors = FALSE)
	
	
	#### CODE ####

snippet plot
	plot_ly(type = "scatter",
					mode = "lines+markers",
					data = ${1:dta},
					x = ~${2:x},
					y = ~${3:y},
					# color = ~ , 
					hoverinfo = 'text',
					text = apply(${1:dta}, 1, function(l) {
						paste(names(l), ":", l, collapse = "\n")
					})
	)
	
snippet hist
	plot_ly(x = ${1:dta},
					type = "histogram",
					histnorm = "",# "" | "percent" | "probability"
					name = "${1:dta}",
					# nbinsx = 100, # no more than nbinsx
					hovertemplate = "x: (%{x})\ny: %{y}",
					marker = list(color = "green",
												line = list(color = "black",
																		width = 1))
					) %>%
		layout(
			title = "${2:x}",
			xaxis = list(title = "${2:x}"),
			yaxis = list(title = "Count", # "percent" | "probability"
										zeroline = TRUE)
	  )

snippet micro
	microbenchmark::microbenchmark(
			old = {},
			new = {}
	)

snippet myColor
	myColors <- list(
		red = "#CC0015",
		green = "#27CC1D",
		blue = "#003ECC",
		yellow = "#CCB600",
		orange = "#CC6300",
		purple = "#CA01CC",

		red_ = c("#CC0015", "#B30012", "#8C000E", "#6B000B", "#420007"),		
		green_ = c("#27CC1D", "#21B319", "#1A8C14", "#146B0F", "#0C4209"),
		blue_ = c("#003ECC", "#0036B3", "#002A8C", "#00206B", "#001442"),
		yellow_ = c("#CCB600", "#B3A100", "#8C7E00", "#6B6000", "#423C00"),
		orange_ = c("#CC6300", "#B35600", "#8C4400", "#6B3400", "#422000"),
		purple_ = c("#CA01CC", "#B000B3", "#8A008C", "#69006B", "#410042")
	)
	
snippet testAPI
	# Test ${1:METHODE} /${2:path} ----
	test_that("${1:METHODE} /${2:path}", {
		  
		# creat path and request
		path <- paste0(host,"/${2:path}")
		query <- list(
			${3:key} = ${4:value}
			)
		
		
		# send request
		resp <- ${1:METHODE}(path,
								query = query)
		
		# test status
		expect_equal(resp\$status_code, 200)
		
		# test response content
		respContent <- content(resp)
		expect_equal(respContent\$KEY, VALUE)
	})
